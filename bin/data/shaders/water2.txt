#VS_BEGIN
#version 400
uniform sampler2D normalmap;
uniform float in_Time;

layout(location = 0) in  vec3 in_Position;

out vec3 vsVert;

void main() {
	vec3 vertex = in_Position;

	vec4 large  = texture2D( normalmap, ( vertex.xz  + in_Time * 4.0 ) / 500.0 );
	vec4 medium = texture2D( normalmap, ( vertex.xz  + in_Time / 3.0) / 70.0 );
	vec4 small  = texture2D( normalmap, ( vertex.xz  + in_Time  ) / 40.0 );
	
	vertex.y += ( large.a - 0.5 ) * 2.0;
	vertex.y += ( medium.a - 0.5 ) * 1.0;
	vertex.y += ( small.a - 0.5 ) * 1.0;
	
	vsVert = vertex.xyz;
}

#VS_END



#TC_BEGIN
#version 400
uniform vec3 in_ViewPos;
layout(vertices = 3) out;

in vec3 vsVert[];
out vec3 tcPosition[];

void main() {
	tcPosition[ gl_InvocationID ] = vsVert[ gl_InvocationID ];
	float len = length( in_ViewPos - vsVert[ gl_InvocationID ] );
	if ( gl_InvocationID == 0 ) {
		if ( len < 50.0 && len >= 30.0 ) {
			gl_TessLevelInner[ 0 ] = 2.0;
			gl_TessLevelOuter[ 0 ] = 2.0;
			gl_TessLevelOuter[ 1 ] = 2.0;
			gl_TessLevelOuter[ 2 ] = 2.0;
		} else
		if ( len < 30.0 && len >= 15.0 ) {
			gl_TessLevelInner[ 0 ] = 3.0;
			gl_TessLevelOuter[ 0 ] = 3.0;
			gl_TessLevelOuter[ 1 ] = 3.0;
			gl_TessLevelOuter[ 2 ] = 3.0;
		} else 
		if ( len < 20.0 ) {
			gl_TessLevelInner[ 0 ] = 4.0;
			gl_TessLevelOuter[ 0 ] = 4.0;
			gl_TessLevelOuter[ 1 ] = 4.0;
			gl_TessLevelOuter[ 2 ] = 4.0;
		} else {
			gl_TessLevelInner[ 0 ] = 1.0;
			gl_TessLevelOuter[ 0 ] = 1.0;
			gl_TessLevelOuter[ 1 ] = 1.0;
			gl_TessLevelOuter[ 2 ] = 1.0;
		}
	} 
}

#TC_END

#TE_BEGIN
#version 400
uniform float in_Time;
uniform sampler2D normalmap;

layout(triangles, equal_spacing, cw) in;

in vec3 tcPosition[];
out vec3 teVertex;

uniform mat4 in_MVPMatrix;

void main() {
	vec3 p0 = gl_TessCoord.x * tcPosition[ 0 ];
	vec3 p1 = gl_TessCoord.y * tcPosition[ 1 ];
	vec3 p2 = gl_TessCoord.z * tcPosition[ 2 ];
	teVertex = p0 + p1 + p2;
	gl_Position = in_MVPMatrix * vec4( teVertex , 1.0 );
}

#TE_END

#FS_BEGIN
#version 400
uniform sampler2D diffuse1;
uniform sampler2D normalmap;
uniform float in_Time;
uniform vec3 in_LightPos;
uniform vec3 in_ViewPos;

in vec3 teVertex;

layout(location = 0) out vec4 FragColor;


float Fresnel( float lambertTerm, float fresnelBias, float fresnelPower )
{
	float facing = 1.0 - lambertTerm;

	return max( fresnelBias + ( 1.0 - fresnelBias ) * pow( facing, fresnelPower ), 0.0 );
}

void main() {
	vec3 t = normalize( vec3( -1.0, 0.0, 0.0 ) );
	vec3 n = normalize( vec3( 0.0, 1.0, 0.0 ) );
	vec3 b = normalize( cross( n, t ) );

	mat3 TBN = mat3( t, b, n );

	vec4 large  = texture2D( normalmap, ( teVertex.xz + in_Time * 4.0 ) / 500.0 );
	vec4 medium = texture2D( normalmap, ( teVertex.xz + in_Time / 3.0 ) / 70.0 );
	vec4 small  = texture2D( normalmap, ( teVertex.xz + in_Time  ) / 40.0 );
	vec3 N = normalize( ( large.rgb + medium.rgb + small.rgb )/3.0 * 6.0 - 3.0 );

	vec3 V = normalize( TBN * ( in_ViewPos - teVertex ) );
	vec3 L = normalize( TBN * ( in_LightPos - teVertex ) );
	float NdotL = clamp( dot( N, L ), 0.0, 1.0 );
	float NdotV = clamp( dot( N, V ), 0.0, 1.0 );
	float spec  = dot( V, -reflect( L, N )  );
	spec = max( pow( spec, 80.0 ), 0.0 );

	float fresnel = Fresnel( NdotV, 0.2, 5.0 );
	
	vec3 color = vec3( 0.5, 0.9, 0.9 );
	FragColor.xyz = color * fresnel + spec * vec3( 1.0, 1.0, 0.5 );
	FragColor.w = 1.0;
}

#FS_END