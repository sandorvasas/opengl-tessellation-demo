#VS_BEGIN
#version 400
uniform float in_Time;
uniform sampler2D normalmap;

const float		in_Scale = 10.0;
const vec2		in_WindVector = vec2( 0.0, 1.0 );
const float		in_PixelStep = 16.0;

layout(location = 0) in vec3 in_Position;

out vec3 vsPosition;

void main() {
	vec3 vertex = in_Position;

	float large  = texture( normalmap, ( in_Position.xz + in_WindVector * in_Time * 4.0 ) / 500.0 ).a;
	float medium = texture( normalmap, ( in_Position.xz + in_WindVector * in_Time / 3.0 ) / 70.0 ).a;
	float small  = texture( normalmap, ( in_Position.xz + in_WindVector * in_Time  ) / 40.0 ).a;

	vertex.y += ( large - 0.5 ) * 2.0; 
	vertex.y += ( medium - 0.5 ) * 1.0;
	vertex.y += ( small - 0.5 ) * 1.0;
	

	vsPosition = vertex;
}

#VS_END

#TC_BEGIN
#version 400

uniform vec3 in_ViewPos;

layout(vertices = 3) out;

in vec3 vsPosition[];
out vec3 tcPosition[];

void main() 
{
		tcPosition[ gl_InvocationID ] = vsPosition[ gl_InvocationID ];

		if ( gl_InvocationID == 0 ) 
		{
			float distance = length( in_ViewPos - vsPosition[ 0 ] );
			float f = (1.0 - clamp( ( distance - 25.0 ) / 40.0, 0.0, 1.0 )) * 8.0;
			f = max( f, 1.0 );
			gl_TessLevelInner[ 0 ] = f;
			gl_TessLevelOuter[ 0 ] = f;
			gl_TessLevelOuter[ 1 ] = f;
			gl_TessLevelOuter[ 2 ] = f;
		}
}

#TC_END

#TE_BEGIN
#version 400
layout(triangles, equal_spacing, cw) in;

uniform float		in_Time;
uniform mat4		in_MVPMatrix;
uniform sampler2D	normalmap;

const float			in_Scale = 10.0;
const vec2			in_WindVector = vec2( 0.0, 1.0 );

in vec3				tcPosition[];
out vec3			tePosition;

void main() {
	vec3 p0 = gl_TessCoord.x * tcPosition[ 0 ];
	vec3 p1 = gl_TessCoord.y * tcPosition[ 1 ];
	vec3 p2 = gl_TessCoord.z * tcPosition[ 2 ];

	tePosition = p0 + p1 + p2;

	float large  = texture( normalmap, ( tePosition.xz + in_WindVector * in_Time * 4.0 ) / 250.0 ).a;
	float medium = texture( normalmap, ( tePosition.xz + in_WindVector * in_Time / 3.0 ) / 35.0 ).a;
	float small  = texture( normalmap, ( tePosition.xz + in_WindVector * in_Time  ) / 20.0 ).a;

	tePosition.y += ( large - 0.5 ) * 0.6; 
	tePosition.y += ( medium - 0.5 ) * 0.3;
	tePosition.y += ( small - 0.5 ) * 0.3;

	gl_Position = in_MVPMatrix * vec4( tePosition, 1.0 );
}

#TE_END

#FS_BEGIN
#version 400

uniform vec3		in_LightPos;
uniform vec3		in_ViewPos;
uniform float		in_Time;
uniform sampler2D	normalmap;

const float		in_Scale = 10.0;
const vec2		in_WindVector = vec2( 0.0, 1.0 );

in vec3 tePosition;

layout(location = 0) out vec4 FragmentColor;

float Fresnel( float NdotV, float fresnelBias, float fresnelPower ) {
	float facing = 1.0 - NdotV;
	return max( fresnelBias + ( 1.0 - fresnelBias ) * pow( facing, fresnelPower ), 0.0 );
}

void main()
{
	vec3 t = normalize( vec3( -1.0, 0.0, 0.0 ) );
	vec3 n = normalize( vec3( 0.0, 1.0, 0.0 ) );
	vec3 b = normalize( cross( n, t ) );

	mat3 TBN = mat3( t, b, n );

	vec4 large  = texture2D( normalmap, ( tePosition.xz + in_WindVector * in_Time * 4.0 ) / 250.0 );
	vec4 medium = texture2D( normalmap, ( tePosition.xz + in_WindVector * in_Time / 3.0 ) / 35.0 );
	vec4 small  = texture2D( normalmap, ( tePosition.xz + in_WindVector * in_Time  ) / 20.0 );

	vec3 N = normalize( ( large.rgb + medium.rgb + small.rgb )/3.0 * 4.0 - 2.0 );

	vec3 V = normalize( TBN*(in_ViewPos - tePosition) );
	vec3 L = normalize( TBN*(in_LightPos - tePosition) );
	float NdotV = clamp( dot( N, V ), 0.0, 1.0 );
	float specular =  dot( V, -reflect( L, N ) );
	specular = max( pow( specular, 80.0 ), 0.0 );

	float Fterm = Fresnel( NdotV, 0.2, 5.0 );

	vec3 color = vec3( 0.3, 0.7, 0.7 );
	FragmentColor.xyz = color * vec3( 0.2 + Fterm )+ specular * vec3( 1.0, 1.0, 0.5 );
	FragmentColor.w = 1.0;
}

#FS_END