#FS_BEGIN
uniform sampler2D diffuse1;
uniform sampler2D normalmap;
uniform float time;
uniform vec3 lightPos;
uniform vec3 viewPos;

varying vec3 vert;

void main() {
	vec3 t = normalize( vec3( -1.0, 0.0, 0.0 ) );
	vec3 n = normalize( vec3( 0.0, 1.0, 0.0 ) );
	vec3 b = normalize( cross( n, t ) );

	mat3 TBN = mat3( t, b, n );

	vec4 large  = texture2D( normalmap, ( vert.xz + time * 4.0 ) / 500.0 );
	vec4 medium = texture2D( normalmap, ( vert.xz + time / 3.0 ) / 70.0 );
	vec4 small  = texture2D( normalmap, ( vert.xz + time  ) / 40.0 );
	vec3 N = normalize( ( large.rgb + medium.rgb + small.rgb )/3.0 * 6.0 - 3.0 );

	vec3 V = normalize( TBN * ( viewPos - vert ) );
	vec3 L = normalize( TBN * ( lightPos - vert ) );
	float NdotL = clamp( dot( N, L ) + 0.7, 0.0, 1.0 );
	float spec  = dot( V, -reflect( L, N )  );
	spec = max( pow( spec, 80.0 ), 0.0 );

	float incidentAngle = acos( dot( V, N ) );
	float refractAngle = asin( sin( incidentAngle ) / 1.3333 );

	float coef_Rs = pow( sin( incidentAngle - refractAngle ) / sin( incidentAngle + refractAngle ), 2.0 );
	float coef_Rp = pow( (1.333*cos( incidentAngle ) - cos( refractAngle )) / (1.333*cos( incidentAngle ) + cos( refractAngle ) ), 2.0 );
	
	vec3 color = vec3( 0.5, 0.9, 0.9 );
	gl_FragColor.xyz = color  * ( 0.5 + coef_Rs + coef_Rp ) * 0.5 + spec * vec3( 1.0, 1.0, 0.5 );
	gl_FragColor.w = 1.0;
}

#FS_END



#VS_BEGIN
uniform sampler2D normalmap;
uniform float time;
uniform vec3 viewPos;

varying vec3 vert;


void main() {
	vec4 vertex = gl_Vertex;

	vec4 large  = texture2D( normalmap, ( vertex.xz  + time * 4.0 ) / 500.0 );
	vec4 medium = texture2D( normalmap, ( vertex.xz  + time / 3.0) / 70.0 );
	vec4 small  = texture2D( normalmap, ( vertex.xz  + time  ) / 40.0 );

	vertex.y += ( large.a - 0.5 ) * 2.0;
	vertex.y += ( medium.a - 0.5 ) * 1.0;
	vertex.y += ( small.a - 0.5 ) * 1.0;
	
	gl_Position = gl_ModelViewProjectionMatrix * vertex;

	vert = vertex.xyz;
}

#VS_END